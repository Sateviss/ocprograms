NAME
  crunch - a source code compressor for OpenComputers
  
SYNOPSIS
  crunch [options] FILES...
  
DESCRIPTION
  compresses lua source files with minimal changes to behaviour
  The most common use case is to prepare code for an EEPROM.
  (-> allows using more complex code within the EEPROM limits)
  
  Token Compression (lossless)
  ->remove comments and unnecessary whitespace
  (to be implemented: shorten strings and numbers)
  Compression with Tree Parsing
  ->includes everything from "token compression"
  ->shortens local variable names (lossless)
  ->replaces string, number, boolean and nil constants (lossless)
  ->replaces global variables by local variables (lossy when relying on side effects from outside code or _ENV changes)
  
OPTIONS
  --infix=INFIX
    adds the given infix to the file name (default: ".cr")
    file1.lua -> file1.cr.lua; file2 -> file2.cr
    
  --output=FILE1,FILE2...,FILEN
    overrides the output file name for the first N files
    
  --blacklist=name1,name2
    doesn't touch the given globals
    That prevents them being replaced by shortened locals.
    It is necessary e.g. if they are used with side effects from external scripts.
    
  --blacklist=*
    doesn't touch globals at all
    The output code is guaranteed to behave like the input code but it is a bit larger than normal compressed code.
    
  --tree
    forces tree parsing
    (->building a parsing table if it doesn't exist)
    
  --notree
    forces using only token compression (-> no variable renaming)
  
EXAMPLES
  crunch hello.lua
    compresses the file hello.lua using hello.cr.lua as output

  crunch a.lua b.lua c.lua --blacklist=_G,table --output=1.lua,2.lua,3.lua
    compresses "a.lua", "b.lua" and "c.lua" while leaving any part referring to the globals "_G" and "table" as they are
    The output is written to the files "1.lua", "2.lua" and "3.lua".
  
  crunch edit.lua --notree --infix=2
    compresses "edit.lua" using only token compression
    The output is written to the file "edit2.lua".
